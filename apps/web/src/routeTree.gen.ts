/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as R404RouteImport } from './routes/404'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardSettingsRouteRouteImport } from './routes/dashboard/settings/route'
import { Route as DashboardSettingsSettingsRouteImport } from './routes/dashboard/settings/settings'
import { Route as DashboardSettingsRoleIndexRouteImport } from './routes/dashboard/settings/role/index'
import { Route as DashboardSettingsMenuIndexRouteImport } from './routes/dashboard/settings/menu/index'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const R404Route = R404RouteImport.update({
  id: '/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardSettingsRouteRoute = DashboardSettingsRouteRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardSettingsSettingsRoute =
  DashboardSettingsSettingsRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => DashboardSettingsRouteRoute,
  } as any)
const DashboardSettingsRoleIndexRoute =
  DashboardSettingsRoleIndexRouteImport.update({
    id: '/role/',
    path: '/role/',
    getParentRoute: () => DashboardSettingsRouteRoute,
  } as any)
const DashboardSettingsMenuIndexRoute =
  DashboardSettingsMenuIndexRouteImport.update({
    id: '/menu/',
    path: '/menu/',
    getParentRoute: () => DashboardSettingsRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/404': typeof R404Route
  '/login': typeof LoginRoute
  '/dashboard/settings': typeof DashboardSettingsRouteRouteWithChildren
  '/dashboard/settings/settings': typeof DashboardSettingsSettingsRoute
  '/dashboard/settings/menu': typeof DashboardSettingsMenuIndexRoute
  '/dashboard/settings/role': typeof DashboardSettingsRoleIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/404': typeof R404Route
  '/login': typeof LoginRoute
  '/dashboard/settings': typeof DashboardSettingsRouteRouteWithChildren
  '/dashboard/settings/settings': typeof DashboardSettingsSettingsRoute
  '/dashboard/settings/menu': typeof DashboardSettingsMenuIndexRoute
  '/dashboard/settings/role': typeof DashboardSettingsRoleIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/404': typeof R404Route
  '/login': typeof LoginRoute
  '/dashboard/settings': typeof DashboardSettingsRouteRouteWithChildren
  '/dashboard/settings/settings': typeof DashboardSettingsSettingsRoute
  '/dashboard/settings/menu/': typeof DashboardSettingsMenuIndexRoute
  '/dashboard/settings/role/': typeof DashboardSettingsRoleIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/404'
    | '/login'
    | '/dashboard/settings'
    | '/dashboard/settings/settings'
    | '/dashboard/settings/menu'
    | '/dashboard/settings/role'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/404'
    | '/login'
    | '/dashboard/settings'
    | '/dashboard/settings/settings'
    | '/dashboard/settings/menu'
    | '/dashboard/settings/role'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/404'
    | '/login'
    | '/dashboard/settings'
    | '/dashboard/settings/settings'
    | '/dashboard/settings/menu/'
    | '/dashboard/settings/role/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  R404Route: typeof R404Route
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/404': {
      id: '/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof R404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/settings/settings': {
      id: '/dashboard/settings/settings'
      path: '/settings'
      fullPath: '/dashboard/settings/settings'
      preLoaderRoute: typeof DashboardSettingsSettingsRouteImport
      parentRoute: typeof DashboardSettingsRouteRoute
    }
    '/dashboard/settings/role/': {
      id: '/dashboard/settings/role/'
      path: '/role'
      fullPath: '/dashboard/settings/role'
      preLoaderRoute: typeof DashboardSettingsRoleIndexRouteImport
      parentRoute: typeof DashboardSettingsRouteRoute
    }
    '/dashboard/settings/menu/': {
      id: '/dashboard/settings/menu/'
      path: '/menu'
      fullPath: '/dashboard/settings/menu'
      preLoaderRoute: typeof DashboardSettingsMenuIndexRouteImport
      parentRoute: typeof DashboardSettingsRouteRoute
    }
  }
}

interface DashboardSettingsRouteRouteChildren {
  DashboardSettingsSettingsRoute: typeof DashboardSettingsSettingsRoute
  DashboardSettingsMenuIndexRoute: typeof DashboardSettingsMenuIndexRoute
  DashboardSettingsRoleIndexRoute: typeof DashboardSettingsRoleIndexRoute
}

const DashboardSettingsRouteRouteChildren: DashboardSettingsRouteRouteChildren =
  {
    DashboardSettingsSettingsRoute: DashboardSettingsSettingsRoute,
    DashboardSettingsMenuIndexRoute: DashboardSettingsMenuIndexRoute,
    DashboardSettingsRoleIndexRoute: DashboardSettingsRoleIndexRoute,
  }

const DashboardSettingsRouteRouteWithChildren =
  DashboardSettingsRouteRoute._addFileChildren(
    DashboardSettingsRouteRouteChildren,
  )

interface DashboardRouteRouteChildren {
  DashboardSettingsRouteRoute: typeof DashboardSettingsRouteRouteWithChildren
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardSettingsRouteRoute: DashboardSettingsRouteRouteWithChildren,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  R404Route: R404Route,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
